
Aplikacja do automatycznego tworzenia Zestawów
Skrypty zostały utworzone na potrzeby Aplikacji tworzonej w C#, zostaną one wykorzystane w określonych miejscach w kodzie, numeracja skryptów według nomenklatury dokumentacji technicznej po spotkaniach analitycznych z programistami


•	Skrypt (SQL1) – Funkcja wyświetlająca Listę Zestawów, będzie ona wyświetlana w głównym panelu aplikacji, w której użytkownik będzie mógł wybrać zestaw, który chce utworzyć.


CREATE FUNCTION CDN.ITA_ZESTAW_Lista  
()RETURNS TABLE

AS

RETURN

(
SELECT DISTINCT
	DENSE_RANK() OVER (ORDER BY k1.Twr_GIDNumer) AS 'Numer Zestawu',
  k1.Twr_Nazwa AS 'Nazwa Zestawu',
 k1.Twr_GIDNumer as 'GID Zestawu'
FROM cdn.TwrPodm t1
 JOIN cdn.TwrKarty k1 ON k1.Twr_GIDNumer = t1.TwP_TwrNumer
 JOIN cdn.TwrKarty k2 ON k2.Twr_GIDNumer = t1.TwP_ZamNumer
WHERE TwP_DokRodzaj = 0
)



Rezultat: 
 

•	Skrypt (SQL2.1) – Procedura weryfikująca czy Ilość dostępna na magazynie do sprzedaży jest wystarczająca do realizacji Zestawu
Jeśli Ilość jest:
- zgodna zwraca  „Wystarczająca Ilość Zasobów do utworzenia Zestawu”
- nie zgodna  „Brak wystarczającej Ilości Zasobów do utworzenia Zestawu”
Komunikat będzie ten wyświetlany na potrzeby powiadomienia operatora o dalszych czynnościach



CREATE PROCEDURE [CDN].[ITA_ZESTAW_Zgodność_Ilość] @NumerZestawu INT, @LiczbaZestawów INT

AS 

BEGIN

DECLARE @Zgodnosc INT
DECLARE @LiczbaZastawów INT		

IF OBJECT_ID('tempdb..#TempZestawZasoby') IS NOT NULL

BEGIN

DROP TABLE #TempZestaw

END

CREATE TABLE #TempZestawZasoby
(
[Temp_Twr_Nazwa] VARCHAR(100),
[Temp_Twr_Kod] NVARCHAR(100),
[Temp_GID_Towaru] INT,
[Temp_Ilość] INT
)


;WITH Zestaw AS (
SELECT 
DENSE_RANK() OVER (ORDER BY k1.Twr_GIDNumer) AS 'Numer Zestawu',
k1.Twr_Nazwa as 'Nazwa Zestawu',
k2.Twr_Nazwa as 'Twr_Nazwa',
k2.Twr_Kod as 'Twr_Kod',
k2.Twr_GIDNumer as 'Twr_GIDNumer' ,
t1.TwP_PrzeliczL as 'Ilość',
k2.Twr_Jm
FROM cdn.TwrPodm t1
JOIN cdn.TwrKarty k1 ON k1.Twr_GIDNumer = t1.TwP_TwrNumer
JOIN cdn.TwrKarty k2 ON k2.Twr_GIDNumer = t1.TwP_ZamNumer
WHERE TwP_DokRodzaj = 0
)
    
INSERT INTO #TempZestawZasoby
(
[Temp_Twr_Nazwa],
[Temp_Twr_Kod],
[Temp_GID_Towaru],
[Temp_Ilość] 
)
							
SELECT 
[Twr_Nazwa],
[Twr_Kod],
[Twr_GIDNumer],
([Ilość] * @LiczbaZastawów) as 'Ilość potrzebna do realizacji'
FROM Zestaw
WHERE [Numer Zestawu] = @NumerZestawu
				
				

IF NOT EXISTS (
SELECT 
TwZ_IlSpr 
FROM CDN.TwrZasoby 
join #TempZestawZasoby ON [Temp_GID_Towaru] = TwZ_TwrNumer
where 
TwZ_IlSpr >= [Temp_Ilość]
and TwZ_MagNumer = 128
)

BEGIN

set @Zgodnosc = 0

END
ELSE 
								
set @Zgodnosc =1

IF @Zgodnosc = 1
BEGIN
SELECT 'Wystarczająca Ilość Zasobów do utworzenia Zestawu'
END
ELSE 
SELECT 'Brak wystarczającej Ilośći Zasobów do utworzenia Zestawu'

DROP TABLE #TempZestawZasoby
			
END


•	Skrypt (SQL 2.2) –  Procedura weryfikuje czy dla towarów zostały wygenerowane po 2 etykiety
 Jeśli nie: zwraca informację, która zostanie wyświetlona operatorowi
Jeśli tak: przepuści dalej

CREATE PROCEDURE CDN.ITA_ZESTAW_SprawdzenieEtykiet (@EtykietaStart varchar(50),@EtykietaKoniec varchar(50),@IloscZestawow int,@Zestaw int)

AS
DECLARE @KodZestawu varchar(255)
DECLARE @IdJL int
DECLARE @IloscZestawowWyliczenie int
DECLARE @IDEtykietyStart int
DECLARE @IDEtykietyKoniec int
 
SELECT @KodZestawu=Twr_Kod
FROM cdn.TwrKarty
WHERE Twr_GIDNumer=@Zestaw
 
SELECT top 1 @IdJL=id
FROM wms.LogisticUnitTypes
WHERE Name like @KodZestawu +'%'
 
SELECT @IDEtykietyStart=Id
FROM wms.LogisticUnitObjects
WHERE LogisticsUnitTypeId=@IdJL and Barcode like @EtykietaStart
 
SELECT @IDEtykietyKoniec=Id
FROM wms.LogisticUnitObjects
WHERE LogisticsUnitTypeId=@IdJL and Barcode like @EtykietaKoniec
 
SELECT @IloscZestawowWyliczenie=count(o.Id)
FROM wms.LogisticUnitObjects o
LEFT JOIN wms.StructureObjectsResources r on r.LogisticUnitObjectId=o.Id
WHERE LogisticsUnitTypeId=@IdJL and r.Id is null and o.id>=@IDEtykietyStart and o.id<=@IDEtykietyKoniec
 
IF (@IloscZestawowWyliczenie<=@IloscZestawow)
BEGIN
SELECT 'Za mało wydrukowanych etykiet lub nie wydrukowane etykiety.'
END
IF (@IloscZestawowWyliczenie>@IloscZestawow)
BEGIN
SELECT ''
END
•	Skrypt 3 – Procedura, która jeśli zostały towarów na indeksach zbiorczych na mag  to zwraca o nich informacje, które są potrzebne do wygenerowania dokumentu RW

CREATE PROCEDURE CDN.ITA_ZESTAW_CzyWygenerowaćRW 
AS
 
IF EXISTS(
SELECT z.*
FROM cdn.TwrZasoby z
JOIN cdn.TwrKarty k on k.Twr_GIDNumer=z.TwZ_TwrNumer
WHERE k.Twr_Jm not like 'szt.' and z.TwZ_MagNumer=128
)
BEGIN
SELECT z.TwZ_TwrNumer, z.TwZ_Ilosc, z.TwZ_DstNumer
FROM  cdn.TwrZasoby z
JOIN cdn.TwrKarty k on k.Twr_GIDNumer=z.TwZ_TwrNumer
WHERE k.Twr_Jm not like 'szt.' and z.TwZ_MagNumer=128
END
•	Skrypt 4 – Procedura, która  sprawdza czy istnieją resztki indeksów zbiorczych na mag, jeśli tak to zwraca informacje potrzebne do utworzenia dokumentu PW na magazyn Handlowy

CREATE procedure CDN.ITA_ZESTAW_PozycjePW
AS
 
IF EXISTS(
SELECT z.*
FROM cdn.TwrZasoby z
JOIN cdn.TwrKarty k on k.Twr_GIDNumer=z.TwZ_TwrNumer
WHERE k.Twr_Jm not like 'szt.' and z.TwZ_MagNumer=128
)
BEGIN
SELECT z.TwZ_TwrNumer, 
cast((
SELECT TwP_PrzeliczL/TwP_PrzeliczM
FROM cdn.TwrPodm pp
WHERE TwP_PrzeliczL<>TwP_PrzeliczM and z.TwZ_TwrNumer=pp.TwP_TwrNumer
)*z.TwZ_Ilosc as int) as 'Ilosc', 
p.TPa_Cecha, p.TPa_CCKNumer, p.TPa_CCKTyp, p.TPa_DataW, z.TwZ_KsiegowaNetto
FROM cdn.TwrZasoby z
JOIN cdn.TwrKarty k on k.Twr_GIDNumer=z.TwZ_TwrNumer
JOIN cdn.Dostawy d on d.Dst_GIDNumer=z.TwZ_DstNumer and d.Dst_GIDTyp=z.TwZ_DstTyp and d.Dst_GIDLp=z.TwZ_DstLp
JOIN cdn.TwrPartie p on p.TPa_Id=d.Dst_TpAId
WHERE k.Twr_Jm not like 'szt.' and z.TwZ_MagNumer=128
 
END

•	Skrypt (SQL5) –Procedura, która po wybraniu zestawu przez operatora zwróci wszystkie Towary z tego Zestawu, będą one potrzebne do wystawienia  ciągu dokumentów handlowych oraz magazynowych

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [CDN].[ITA_ZESTAW_Towary] @NumerZestawu INT

AS

BEGIN

;WITH Zestaw AS (
SELECT 
DENSE_RANK() OVER (ORDER BY k1.Twr_GIDNumer) AS 'Numer Zestawu',
k1.Twr_Nazwa as 'Nazwa Zestawu',
k1.Twr_GIDNumer as 'GID Zestawu',
k2.Twr_Nazwa as 'Twr_Nazwa',
k2.Twr_Kod as 'Twr_Kod',
k2.Twr_GIDNumer as 'Twr_GIDNumer' ,
t1.TwP_PrzeliczL as 'Ilość',
k2.Twr_Jm
FROM cdn.TwrPodm t1
JOIN cdn.TwrKarty k1 ON k1.Twr_GIDNumer = t1.TwP_TwrNumer
JOIN cdn.TwrKarty k2 ON k2.Twr_GIDNumer = t1.TwP_ZamNumer
WHERE TwP_DokRodzaj = 0
)
    
		
SELECT 
*
FROM Zestaw
WHERE [Numer Zestawu] = @NumerZestawu
	

END;


Rezultat:

 

•	Skrypt 6 – Procedura, która wyświetli informacje o Pozostających pozycjach na magazynie nie branych pod uwagę w zestawach, ponieważ są to indeksy w jednostkach zbiorczych

CREATE PROCEDURE CDN.ITA_ZESTAW_PozostaleTowary
AS

IF EXISTS(
SELECT z.*
FROM cdn.TwrZasoby z
JOIN cdn.TwrKarty k ON k.Twr_GIDNumer=z.TwZ_TwrNumer
WHERE k.Twr_Jm NOT LIKE 'szt.' AND z.TwZ_MagNumer=128
)
BEGIN
SELECT z.TwZ_TwrNumer, z.TwZ_Ilosc, p.TPa_Cecha, p.TPa_CCKNumer, p.TPa_CCKTyp, p.TPa_DataW, z.TwZ_KsiegowaNetto
FROM cdn.TwrZasoby z
JOIN cdn.TwrKarty k ON k.Twr_GIDNumer=z.TwZ_TwrNumer
JOIN cdn.Dostawy d ON d.Dst_GIDNumer=z.TwZ_DstNumer AND d.Dst_GIDTyp=z.TwZ_DstTyp AND d.Dst_GIDLp=z.TwZ_DstLp
JOIN cdn.TwrPartie p ON p.TPa_Id=d.Dst_TpAId
WHERE k.Twr_Jm NOT LIKE 'szt.' AND z.TwZ_MagNumer=128
END


